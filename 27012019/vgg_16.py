# -*- coding: utf-8 -*-
"""VGG-16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lQZLAuSfCGrEWQp2o8pE3UcF2nz854ZJ
"""

!pip3 install tensorflow-gpu

!pip install numpy

import tensorflow as tf
from tensorflow import keras
import numpy as np
import cv2
import matplotlib.pyplot as plt

datasets = keras.datasets.cifar100

(X_train,y_train), (X_test,y_test) = datasets.load_data()

X_train.shape

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(X_train[i], cmap=plt.cm.binary)
    plt.xlabel(y_train[i])

def blocks_2(filters):
    seq = keras.Sequential()
    seq.add(keras.layers.Conv2D(filters,(3,3), activation='relu',padding='same'))
    seq.add(keras.layers.Conv2D(filters,(3,3),activation='relu',padding='same'))
    seq.add(keras.layers.MaxPooling2D(pool_size=(2,2),strides=(2,2)))
    return seq
def blocks_3(filters):
    seq = keras.Sequential()
    seq.add(keras.layers.Conv2D(filters,(3,3),activation='relu',padding='same'))
    seq.add(keras.layers.Conv2D(filters,(3,3),activation='relu',padding='same'))
    seq.add(keras.layers.Conv2D(filters,(3,3),activation='relu',padding='same'))
    seq.add(keras.layers.MaxPooling2D(pool_size=(2,2),strides=(2,2)))
    return seq

def VGG16(shape):
    model = keras.Sequential()
    #block 1
    model.add(keras.layers.Conv2D(64,(3,3),input_shape = shape,padding = 'same',activation = 'relu')) 
    model.add(keras.layers.Conv2D(64,(3,3),activation='relu',padding='same'))
    model.add(keras.layers.MaxPooling2D(pool_size=(2,2),strides=(2,2)))
    #block 2
    model.add(blocks_2(128))
    model.add(blocks_3(256))
    model.add(blocks_3(512))
    model.add(blocks_3(512))
    model.add(keras.layers.Flatten())
    model.add(keras.layers.Dense(4096,activation='relu'))
    model.add(keras.layers.Dense(100,activation='relu'))
    model.add(keras.layers.Activation('softmax'))
    sgd = keras.optimizers.SGD(lr=0.0005,decay=0,nesterov=True)
    model.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy'])
    return model

y_test =keras.utils.to_categorical(y_test,100)
y_train = keras.utils.to_categorical(y_train,100)

shape =X_train.shape[1:]
net = VGG16(shape)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /=255
X_test /= 255
tranning = net.fit(X_train,y_train,batch_size=10,epochs=50,validation_data=(X_test,y_test),shuffle=True)

